const R = require("rambda")
const {isValid} = require("./source")
const Benchmark = require("benchmark")
const benchmarks = require("beautify-benchmark")

const options = {}

const joySuite = new Benchmark.Suite
options.joy = true

if (options.joy) {
  const Joi = require("joi")
  const obj = { foo:"bar" }

  joySuite
  .add("Json validity", () => {
    const schema = { foo:"string" }
    isValid({input: obj, schema})
  })
  .add("joi", () => {
    const schema = Joi.object().keys({ foo: Joi.string() })
    Joi.validate(obj, schema, (err, value) => { })
  })
  .on("cycle", event => {
    benchmarks.add(event.target)
  })
  .on("complete", () => {
    benchmarks.log()
  })
  .run({ async:true })
}

const zSchemaSuite = new Benchmark.Suite
options.zSchema = true

if (options.zSchema) {
  const ZSchema = require("z-schema")
  const validator = new ZSchema()

  const obj = {
    a:"foo",
    b:"bar",
  }

  zSchemaSuite
  .add("Json validity", () => {
    const schema = {
      a:"string",
      b:"string",
    }

    isValid({input: obj, schema})
  })
  .add("z-schema", () => {
    const schema = {
      type: "object",
      properties: {
        a: { type: "string" },
        b: { type: "string" },
      },
    }

    validator.validate(obj, schema)
  })
  .on("cycle", event => {
    benchmarks.add(event.target)
  })
  .on("complete", () => {
    benchmarks.log()
  })
  .run()
}

const isMyJsonValidSuite = new Benchmark.Suite
options.isMyJsonValid = true

if (options.isMyJsonValid) {
  const validator = require("is-my-json-valid")

  const obj = { hello: "world" }

  isMyJsonValidSuite
  .add("Json validity", () => {
    const schema = { hello:"string" }

    isValid({input: obj, schema})
  })
  .add("is-my-json-valid", () => {
    const validate = validator({
      required: true,
      type: "object",
      properties: {
        hello: {
          required: true,
          type: "string",
        },
      },
    })

    validate(obj)
  })
  .on("cycle", event => {
    benchmarks.add(event.target)
  })
  .on("complete", () => {
    benchmarks.log()
  })
  .run()
}

const djvSuite = new Benchmark.Suite
options.djv = true

if (options.djv) {
  const djv = require("djv")
  const env = new djv()

  const obj = { type: "common" }

  djvSuite
  .add("Json validity", () => {
    const schema = { type:[ "common" ] }

    isValid({input: obj, schema})
  })
  .add("djv", () => {
    const jsonSchema = {
      common: {
        properties: { type: { enum: [ "common" ] } },
        required: [
          "type",
        ],
      },
    }

    env.addSchema("test", jsonSchema)
    env.validate("test#/common", obj)
  })
  .on("cycle", event => {
    benchmarks.add(event.target)
  })
  .on("complete", () => {
    benchmarks.log()
  })
  .run()
}
